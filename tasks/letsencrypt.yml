---
- name: Ensure directory for certificate is available
  file: 
    path: '{{ letsencrypt_path }}/{{ item.name }}'
    state: directory

# SAN can be filled in openssl_certificate
#- name: Ensure openssl custom configuration is in place
#  template: 
#    src: openssl.cnf.j2
#    dest: '{{ letsencrypt_path }}/{{ domain }}/openssl.cnf'
#  register: openssl_changed

#- name: Ensure old certificate is gone if openssl config has changed
#  file: 
#    path: "{{ letsencrypt_path }}/{{ domain }}/{{ item }}"
#    state: absent
#  with_items:
#    - "{{ domain }}.key"
#    - "{{ domain }}.crt"
#    - "{{ domain }}.csr"
#  when: openssl_changed is changed

# generate account
- name: Ensure account private key for domain do exists
  openssl_privatekey:
      path: "{{ letsencrypt_path }}/{{ item.name }}/account.key"
      size: 4096

# cannot be used on CentOS7 due to old Py
- name: Ensure account public key for domain do exists
  openssl_publickey:
      path: "{{ letsencrypt_path }}/{{ item.name }}/account.pub"
      privatekey_path: "{{ letsencrypt_path }}/{{ item.name }}/account.key"
      format: PEM
  when: (ansible_os_family == "RedHat" and ansible_distribution_version|int > '7')

- name: Ensure account public key for domain exists (RedHat 7)
  shell: openssl rsa -in account.key -pubout > account.pub 
  args:
      creates: "account.pub"
      chdir: "{{ letsencrypt_path }}/{{ item.name }}"
  when: ansible_os_family == "RedHat" and ansible_distribution_version|int > 6 and ansible_distribution_version|int < '8' 

# certificate
- name: Ensure private key exists
  openssl_privatekey:
      path: "{{ letsencrypt_path }}/{{ item.name }}/domain.key"
      size: 4096

#- set_fact: 
#    SUBJ: '/C=CZ/ST=CZ/O={{ inventory_hostname }}/CN={{ inventory_hostname }}'

#- name: Generate csr for domain (SAN)
#  shell: >
#    creates={{ domain }}.csr
#    chdir={{ letsencrypt_path }}/{{ domain }}/
#    openssl req -new -sha256 -key {{ domain }}.key -subj "{{ SUBJ }}" -reqexts SAN -config ./openssl.cnf > {{ domain }}.csr

- name: Generate CSR if not available
  openssl_csr:
      path: "{{ letsencrypt_path }}/{{ item.name }}/domain.csr"
      privatekey_path: "{{ letsencrypt_path }}/{{ item.name }}/domain.key"
      common_name: "{{ item.domains[0] }}"
      organizational_unit_name: "{{ item.domains[0] }}"
      country_name: "CZ"
      state_or_province_name: "CZ"
      subject_alt_name: "{{ item.domains | map('regex_replace', '^', 'DNS:') | list }}"
      state: present

- name: Generate certificate request
  acme_certificate:
      acme_directory: '{{ letsencrypt_api }}'
      account_key: '{{ letsencrypt_path }}/{{ item.name }}/account.key'
      csr: '{{ letsencrypt_path }}/{{ item.name }}/domain.csr'
      dest: '{{ letsencrypt_path }}/{{ item.name }}/domain.crt'
      remaining_days: 30
      agreement: "https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf"
  register: le_challenge

- debug: var=le_challenge
#  when: letsencrypt_debug

- name: Copy challenge(s) to webdir
  copy:
      dest: "{{ letsencrypt_challenge_dir }}/{{ le_challenge.challenge_data[item_inter]['http-01']['resource'] }}"
      content: "{{ le_challenge.challenge_data[item_inter]['http-01']['resource_value'] }}"
  loop: "{{ item.domains }}" 
  loop_control:
      loop_var: item_inter
  when: le_challenge.changed

- acme_certificate:
      acme_directory: '{{ letsencrypt_api }}'
      account_key: '{{ letsencrypt_path }}/{{ item.name }}/account.key'
      csr: '{{ letsencrypt_path }}/{{ item.name }}/domain.csr'
      dest: '{{ letsencrypt_path }}/{{ item.name }}/domain.crt'
      data: "{{ le_challenge }}"
      remaining_days: 30
      agreement: "https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf"
#  notify: signal httpd reload

